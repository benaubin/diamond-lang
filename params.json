{"name":"Diamond-lang","tagline":"A Ruby Framework for creating Minecraft 1 Command Creations.","body":"#Diamond Lang\r\nDiamond Lang is a minimal framework for Ruby that compiles into Minecraft One Command Creations.\r\n\r\n#Installation:\r\n\r\nDiamondLang is a Ruby Gem.\r\n\r\n##Ruby\r\nDiamondLang is tested to work on Ruby 2.2.X. If you don't have Ruby 2.2.X, but know how to install it, do so in your preferred way. Otherwise, read on:\r\n\r\n###Mac Or Linux\r\n\r\nOpen Terminal (or your equivalent, on Linux) and type:\r\n\r\n~~~sh\r\ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\r\n\\curl -sSL https://get.rvm.io | bash -s stable --ruby\r\n~~~\r\n\r\n###Windows\r\nGo to <http://rubyinstaller.org> and download the correct version of Ruby.\r\n\r\n##Gem\r\n\r\nYou should have [ruby gems][gems], which allows you to download gems. To install diamond lang, type the following in your terminal:\r\n\r\n~~~sh\r\ngem diamond-lang\r\n~~~\r\n\r\nNow, you're good to go.\r\n\r\n\r\n---\r\n\r\n#Getting Started\r\nUsing diamond lang is simpler then command blocks, although we'd recommend learning [a bit of ruby first][try-ruby] - that guide will only take 15 minutes, and is completely optional.\r\n\r\nOnce you've read that, we'll create a Hello World program that will say \"Hello World\" when the command is pasted into the world.\r\n\r\nFirst, we'll include diamond lang, so that we can create a command.\r\n\r\n~~~rb\r\nrequire 'diamond-lang' # Requires DiamondLang\r\n~~~\r\n\r\nNext, we'll create our command. The name of your command should have no spaces, and the start of each word should be capitalized. So, we'll name our \"Hello World\" command \"HelloWorld\". It should also extend (`<`) `DiamondLang::OneCommand`.\r\n\r\n~~~rb\r\nrequire 'diamond-lang'\r\nclass HelloWorld < DiamondLang::OneCommand\r\nend\r\n~~~\r\n\r\nTo run a command at setup, create a `#setup` method:\r\n\r\n~~~rb\r\nrequire 'diamond-lang'\r\nclass HelloWorld < DiamondLang::OneCommand\r\n  def setup(c)\r\n\r\n  end\r\nend\r\n~~~\r\n\r\nWe're asking for the variable `c`, which is our command block chain. To attach a command, we call it as if it was a method on `c`:\r\n\r\n~~~rb\r\n...\r\ndef setup(c):\r\n  c.tell 'penne12', 'it worked!' #=> 'tell penne12 it worked!'\r\nend\r\n...\r\n~~~\r\n\r\nAt the end of the code you wrote, run `{YourCommandName}.create`\r\n\r\n~~~rb\r\nrequire 'diamond-lang'\r\nclass HelloWorld < DiamondLang::OneCommand\r\n  def setup(c)\r\n    c.tell 'penne12', 'it worked!' #=> 'tell penne12 it worked!'\r\n  end\r\nend\r\nHelloWorld.create\r\n~~~\r\n\r\nto run your code  \r\n\r\n---\r\n\r\n\r\n#Helpers\r\nTo make your life easier, we implemented these features to mimic parts of Minecraft, and commonly used idioms:\r\n\r\n##Commands\r\nCommands are attached to a chain (`c`), and arguments are separated with commas (`,`):\r\n\r\n###Examples:\r\n\r\n~~~rb\r\nc.say \"hi\" #=> say hi\r\nc.tell \"penne12\", \"it works!\" #=> tell penne12 it works\r\n~~~\r\n\r\n##Selectors\r\nEntity/Player selectors are created with `#s`, and can be used as arguments in commands:\r\n\r\n###Examples:\r\n\r\n~~~rb\r\ns(:p) #=> @p\r\ns(:a) #=> @a (etc)\r\ns(a: {r: 1}) #=> @a[r=1]\r\ns(p: {c: 2}) #=> @p[c=2]\r\ns(p: {x: 5, y: 64, z: 5}) #=> @p[x=5,y=64,z=5]\r\n~~~\r\n\r\n##Coordinates:\r\nCoordinates can be created with `#coords`:\r\n\r\n###Examples:\r\n\r\n~~~rb\r\ncoords(4, 5, 6) #=> x: 4, y: 5, z: 6\r\ncoords('~', '~5', '~') #=> x: ~0, y: 5, z: ~0\r\n~~~\r\n\r\nYou can also get a coordinate:\r\n\r\n~~~rb\r\ncoords(4, 5, 6).z #=> DiamondLang::Helpers::Coordinate(z: 6)\r\ncoords(4, 5, 6).y #=> DiamondLang::Helpers::Coordinate(y: 5)\r\ncoords(4, 5, 6).x #=> DiamondLang::Helpers::Coordinate(x: 4)\r\n\r\ntest = coords(4, 5, 6) #=> coords(4, 5, 6)\r\ntext.x + 5 #=> 9\r\ntest #=> coords(9, 5, 6)\r\n~~~\r\n\r\n##Coordinate:\r\nA single coordinate on the x, y, or z axis.\r\n\r\nYou can run `+` or `-`, which adds/substracts to the coordinate respectively.\r\n\r\n###Examples:\r\n\r\n~~~rb\r\nDiamondLang::Helpers::Coordinate(:x, 6) #=> x: 3\r\nDiamondLang::Helpers::Coordinate(:x, 6) + 5 #=> 11\r\n#=> Command Block: \t\t\t\t\t\ttest_for @a[r=10]\r\n#=> Chained conditional command block: \ttell @a[r=10] hello\r\n~~~\r\n\r\n##Conditions:\r\n*Coming soon!*\r\nTo make commands run on success, attach a block:\r\n\r\n~~~rb\r\nc.test_for s(a: {r: 10}) do |c| # conditionals coming soon!\r\n  c.tell s(a: {r: 10}), 'hello'\r\nend\r\n#=> Command Block: \t\t\t\t\t\ttest_for @a[r=10]\r\n#=> Chained conditional command block: \ttell @a[r=10] hello\r\n~~~\r\n\r\n##Plain Ruby:\r\nDiamond Lang is just a Ruby framework, so you can have awesome things, like variables:\r\n\r\n~~~rb\r\nclose_players = s(a: {r: 10})\r\nc.test_for close_players do |c| # conditionals coming soon!\r\n  c.tell close_players, 'hello'\r\nend #=> @a[r=10]\r\n~~~\r\n\r\nhashes instead of arrays (we flatten the command arguments)\r\n\r\n~~~rb\r\nc.tell penne12: 'something' #=> tell penne12 something\r\n~~~\r\n\r\nstring interpolation:\r\n\r\n~~~rb\r\nc.tell penne12: \"2 + 2 is #{2 + 2}\" #=> tell penne12 2 + 2 is 4\r\n~~~\r\n\r\nloops to ease the creation of commands:\r\n\r\n~~~rb\r\n(5..10).each do |number|\r\n  c.tell 'penne12', number\r\nend #=> tell penne12 5, tell penne12 6, tell penne12 7, tell penne12 8, tell penne12 9, tell penne12 10\r\n~~~\r\n\r\nand more.\r\n\r\n[gems]: https://rubygems.org\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}